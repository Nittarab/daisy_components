#!/usr/bin/env bash

# DaisyComponents Setup Script
# This script automates environment setup for the repository

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Detect OS and architecture
detect_platform() {
  log "Detecting platform..."
  
  OS=$(uname -s | tr '[:upper:]' '[:lower:]')
  ARCH=$(uname -m)
  
  case $ARCH in
    x86_64|amd64)
      ARCH="x64"
      ;;
    aarch64|arm64)
      ARCH="arm64"
      ;;
    *)
      error "Unsupported architecture: $ARCH"
      exit 1
      ;;
  esac
  
  case $OS in
    linux)
      PLATFORM="linux-$ARCH"
      ;;
    darwin)
      PLATFORM="macos-$ARCH"
      ;;
    *)
      error "Unsupported OS: $OS"
      exit 1
      ;;
  esac
  
  success "Detected platform: $PLATFORM"
}

# Install mise if not already present
install_mise() {
  log "Checking for mise installation..."
  
  if command -v mise >/dev/null 2>&1; then
    success "mise is already installed ($(mise --version))"
    return 0
  fi
  
  log "Installing mise..."
  
  # Use the recommended install method from https://github.com/jdx/mise
  if ! curl -fsSL https://mise.run | sh; then
    error "Failed to download and install mise"
    exit 1
  fi
  
  # Add mise to PATH for current session
  export PATH="$HOME/.local/bin:$PATH"
  
  # Verify installation
  if command -v mise >/dev/null 2>&1; then
    success "mise installed successfully ($(mise --version))"
  else
    error "Failed to install mise - binary not found in PATH"
    log "Trying alternative path..."
    if [[ -f "$HOME/.local/bin/mise" ]]; then
      export PATH="$HOME/.local/bin:$PATH"
      success "mise found at $HOME/.local/bin/mise"
    else
      error "mise installation failed"
      exit 1
    fi
  fi
}

# Update .tool-versions with latest Ruby version
update_tool_versions() {
  log "Updating .tool-versions..."
  
  RUBY_VERSION="latest"
  
  if [[ -f .tool-versions ]]; then
    # Update existing file
    if grep -q "^ruby" .tool-versions; then
      sed -i.bak "s/^ruby.*/ruby $RUBY_VERSION/" .tool-versions
      rm -f .tool-versions.bak
      success "Updated Ruby version to $RUBY_VERSION in .tool-versions"
    else
      echo "ruby $RUBY_VERSION" >> .tool-versions
      success "Added Ruby $RUBY_VERSION to .tool-versions"
    fi
  else
    # Create new file
    echo "ruby $RUBY_VERSION" > .tool-versions
    success "Created .tool-versions with Ruby $RUBY_VERSION"
  fi
}

# Install Ruby using mise
install_ruby() {
  log "Installing Ruby via mise..."
  
  # Ensure mise is in PATH
  export PATH="$HOME/.local/bin:$PATH"
  
  # Enable mise for current session
  if ! eval "$(mise activate bash)" 2>/dev/null; then
    warn "Could not activate mise, trying direct installation..."
  fi
  
  # Install Ruby
  if ! mise install ruby; then
    error "Failed to install Ruby"
    exit 1
  fi
  
  # Verify installation
  if mise which ruby >/dev/null 2>&1; then
    INSTALLED_RUBY=$(mise exec -- ruby --version)
    success "Ruby installed successfully: $INSTALLED_RUBY"
  else
    error "Failed to verify Ruby installation"
    exit 1
  fi
}

# Install Bundler if not present
install_bundler() {
  log "Checking for Bundler..."
  
  # Ensure mise is in PATH
  export PATH="$HOME/.local/bin:$PATH"
  
  # Use mise to run commands with the correct Ruby version
  if ! eval "$(mise activate bash)" 2>/dev/null; then
    warn "Could not activate mise, trying direct commands..."
  fi
  
  if mise exec -- bundle --version >/dev/null 2>&1; then
    BUNDLER_VERSION=$(mise exec -- bundle --version)
    success "Bundler is already installed: $BUNDLER_VERSION"
  else
    log "Installing Bundler..."
    if ! mise exec -- gem install bundler; then
      error "Failed to install Bundler"
      exit 1
    fi
    success "Bundler installed successfully"
  fi
}

# Run bundle install at repository root
bundle_install_root() {
  log "Running 'bundle install' at repository root..."
  
  export PATH="$HOME/.local/bin:$PATH"
  
  if ! eval "$(mise activate bash)" 2>/dev/null; then
    warn "Could not activate mise, trying direct commands..."
  fi
  
  if [[ ! -f Gemfile ]]; then
    error "No Gemfile found in repository root"
    exit 1
  fi
  
  if ! mise exec -- bundle install; then
    error "Failed to run bundle install in repository root"
    exit 1
  fi
  
  success "Dependencies installed for repository root"
}

# Run bundle install in test/dummy if Gemfile exists
bundle_install_dummy() {
  log "Checking for test/dummy application..."
  
  if [[ ! -d test/dummy ]]; then
    warn "test/dummy directory not found, skipping"
    return 0
  fi
  
  if [[ ! -f test/dummy/Gemfile ]]; then
    warn "test/dummy/Gemfile not found, skipping bundle install for dummy app"
    return 0
  fi
  
  log "Running 'bundle install' in test/dummy..."
  
  export PATH="$HOME/.local/bin:$PATH"
  
  if ! eval "$(mise activate bash)" 2>/dev/null; then
    warn "Could not activate mise, trying direct commands..."
  fi
  
  cd test/dummy
  
  if ! mise exec -- bundle install; then
    error "Failed to run bundle install in test/dummy"
    cd ../..
    exit 1
  fi
  
  cd ../..
  success "Dependencies installed for test/dummy application"
}

# Main setup function
main() {
  echo "========================================="
  echo "  DaisyComponents Environment Setup"
  echo "========================================="
  echo
  
  detect_platform
  install_mise
  update_tool_versions
  install_ruby
  install_bundler
  bundle_install_root
  bundle_install_dummy
  
  echo
  echo "========================================="
  success "Environment setup completed successfully!"
  echo "========================================="
  echo
  log "To use the environment in new shell sessions, run:"
  echo "  eval \"\$(mise activate bash)\"  # for bash"
  echo "  eval \"\$(mise activate zsh)\"   # for zsh"
  echo
  log "Or add this to your shell's configuration file (e.g., ~/.bashrc, ~/.zshrc):"
  echo "  eval \"\$(~/.local/bin/mise activate bash)\""
}

# Run main function
main "$@"